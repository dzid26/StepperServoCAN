/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.1.0 Mon Jun 23 01:43:12 2025.
 */

#ifndef MSG_H
#define MSG_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MSG_STEERING_COMMAND_FRAME_ID (0x22eu)
#define MSG_STEERING_STATUS_FRAME_ID (0x22fu)

/* Frame lengths in bytes. */
#define MSG_STEERING_COMMAND_LENGTH (5u)
#define MSG_STEERING_STATUS_LENGTH (8u)

/* Extended or standard frame types. */
#define MSG_STEERING_COMMAND_IS_EXTENDED (0)
#define MSG_STEERING_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define MSG_STEERING_COMMAND_STEER_MODE_OFF_CHOICE (0u)
#define MSG_STEERING_COMMAND_STEER_MODE_TORQUE_CONTROL_CHOICE (1u)
#define MSG_STEERING_COMMAND_STEER_MODE_ANGLE_CONTROL_CHOICE (2u)
#define MSG_STEERING_COMMAND_STEER_MODE_SOFT_OFF_CHOICE (3u)

/**
 * Signals in message STEERING_COMMAND.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_steering_command_t {
    /**
     * 8bit sum of all bytes and message id
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum;

    /**
     * Rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter;

    /**
     * Control mode request.
     * Off - instant 0 torque
     * TorqueControl - use steer_torque,
     * AngleControl - use steer_angle as relative target and steer_torque as feedforward,
     * SoftOff - ramp torque down with constant rate, command Off after SoftOff to resume control
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_mode;

    /**
     * Steering relative angle request for internal close loop controller
     *
     * Range: -32768..32767 (-4096..4095.875 deg)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t steer_angle;

    /**
     * Steering torque request
     *
     * Range: -128..127 (-16..15.875 Nm)
     * Scale: 0.125
     * Offset: 0
     */
    int8_t steer_torque;
};

/**
 * Signals in message STEERING_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_steering_status_t {
    /**
     * 8bit sum of all bytes and message id
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum;

    /**
     * Rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter;

    /**
     * Bitwise states: bit0 - sensored torque control is enabled, bit1 - sensor feedback enabled, bit2 - openloop soft off active, bit3 - internal closeloop mode enabled
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_status;

    /**
     * Motor torque calculated at the steering
     *
     * Range: -128..127 (-16..15.875 Nm)
     * Scale: 0.125
     * Offset: 0
     */
    int8_t steering_torque;

    /**
     * Steering speed calculated from motor position sensor
     *
     * Range: -128..127 (-2..1.984375 rev/s)
     * Scale: 0.015625
     * Offset: 0
     */
    int8_t steering_speed;

    /**
     * Motor PCB temperature
     *
     * Range: 0..255 (-60..195 C)
     * Scale: 1
     * Offset: -60
     */
    uint8_t temperature;

    /**
     * Steering angle calculated from motor position sensor
     *
     * Range: -32768..32767 (-4096..4095.875 deg)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t steering_angle;

    /**
     * Bitwise status. Refer to source
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t debug_states;
};

/**
 * Unpack message STEERING_COMMAND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Msg_steering_command_unpack(
    struct Msg_steering_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float Msg_steering_command_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_command_checksum_is_in_range(uint8_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float Msg_steering_command_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_command_counter_is_in_range(uint8_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float Msg_steering_command_steer_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_command_steer_mode_is_in_range(uint8_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float Msg_steering_command_steer_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_command_steer_angle_is_in_range(int16_t value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float Msg_steering_command_steer_torque_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_command_steer_torque_is_in_range(int8_t value);

/**
 * Pack message STEERING_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Msg_steering_status_pack(
    uint8_t *dst_p,
    const struct Msg_steering_status_t *src_p,
    size_t size);


/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Msg_steering_status_checksum_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Msg_steering_status_counter_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Msg_steering_status_control_status_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_control_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t Msg_steering_status_steering_torque_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_steering_torque_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t Msg_steering_status_steering_speed_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_steering_speed_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Msg_steering_status_temperature_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t Msg_steering_status_steering_angle_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_steering_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Msg_steering_status_debug_states_encode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_steering_status_debug_states_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
