;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir      = src
include_dir  = src/BSP
default_envs = ServoCAN_release

[env]
platform = ststm32@16
upload_protocol = stlink

build_flags =
  -D VERSION=4000
  -D STM32F10X_MD
  -D USE_STDPERIPH_DRIVER
  -W -Wall -pedantic -std=c99
  -fsingle-precision-constant
  -Wdouble-promotion
  -Wfloat-conversion
  -I src/OP
  -I src/CMSIS
  -I src/LIB/inc
  -I src/APP
  -Wl,-Map,${BUILD_DIR}/firmware.map
  -D HSE_VALUE=16000000 ;16Mhz crystal

  # NVM setters (check nonvolatile.c):
  -D NVM_SAVE_DEFAULT_PID_PARAMS=0
  -D NVM_SET_DIR_ROTATION=-1            # change if you want to flip rotation direction
  -D NVM_SET_ENABLE_PIN_MODE=-1         # change enable pin polarity
  -D NVM_SET_MOTOR_STEPS=-1             # don't change - autocalibrated (200 or 400) - change for exotic motors
  -D NVM_SET_MOTOR_PHASE_ORIENTATION=-1 # don't change - autocalibrated
  -D NVM_SET_CAN_STATUS_ID=-1           # change CAN id if you have multiple motors on the bus
  -D NVM_SET_CAN_COMMAND_ID=-1          # change CAN id to control each motor individually

board_build.ldscript = ./src/APP/STM32F103C8_DEFAULT.ld
board_upload.maximum_size = 63488
extra_scripts = 
  pre:erase_task.py
  pre:linker_options_pio.py

check_tool = cppcheck, clangtidy
check_skip_packages = yes ;don't inlcude compiler package inludes 
check_patterns = 
  src/BSP/*.c
  src/BSP/*.h
check_flags =
  cppcheck:--addon=misra.json --std=c99 --language=c  --suppress=*:*/src/CMSIS/* --suppress=*:*/src/LIB/*
  clangtidy: --checks=-*,clang-analyzer-*,cert-*,bugprone-*,performance-*,hicpp-*,cppcoreguidelines-*,readability-*



######## Release #########
[env:ServoCAN_release]
board = genericSTM32F103C8
build_type = release
build_flags = ${env.build_flags}
  -D SYSCLK_FREQ_64MHz  ;64Mhz in order for the TLE5012 SPI to run at rated 8mbps
  -O2 -g  #include variable symbols in elf file
  -D NDEBUG #disable newlib assert

test_ignore = *
extra_scripts = ${env.extra_scripts}
  post:generate_compilation_database.py #for the sonarlint



######## Debug / System test #########
[env:ServoCAN_dev]
board = genericSTM32F103C8
build_type = debug
debug_tool = stlink
build_flags = ${env.build_flags}
  -D USE_FULL_ASSERT #ST
  -D IGNORE_CAN_CHECKSUM
  -D DEBUG
  -D SYSCLK_FREQ_72MHz  ;Fullspeed CPU, TLE5012 SPI overclocked to 9mbps

debug_build_flags=
  -Og -g3 -ggdb3   ;O0 is too slow
  ; -Wl,--undefined,_printf_float ;enables printing floats
  
debug_extra_cmds =
  monitor arm semihosting enable
  monitor arm semihosting_fileio enable
  
test_build_src = yes
test_testing_command = ${platformio.packages_dir}/tool-openocd/bin/openocd 
    -s 
    ${platformio.packages_dir}/tool-openocd
    -f 
    interface/stlink.cfg
    -f 
    openocd/scripts/target/stm32f1x.cfg
    -c init
    -c arm semihosting enable
    -c reset run
; test_filter = system/*
; debug_test = system/test_hardware ;uncomment to debug test instead of application main()




######## Unit Testing #########
#most things will not work here if it has any dependency in
[env:ServoCAN_UnitTest] ; unit tests on target
board = genericSTM32F103C8
framework = stm32cube
build_type = debug
build_flags = 
  -D DEBUG

debug_extra_cmds =
  monitor arm semihosting enable
  monitor arm semihosting_fileio enable

test_testing_command =
    ${platformio.packages_dir}/tool-openocd/bin/openocd
    -s 
    ${platformio.packages_dir}/tool-openocd
    -f 
    interface/stlink.cfg
    -f
    openocd/scripts/target/stm32f1x.cfg
    -c
    init
    -c
    arm semihosting enable
    -c
    reset run
test_ignore = system/*



[env:PC_UnitTest]  ; unit tests local
platform = native@1.2.1
build_flags =
test_ignore = system/*
debug_test = test_utils